** controller **
  RPC:
  - semanticaio.app.state.get
    return:
      'new' | 'loading' | 'ready'

  - semanticaio.trainer.state.get
    return:
      'new' | 'loading' | 'ready' | 'starting' | 'training' | 'stopping' | 'committing'

  - semanticaio.config.get
    return: {
      classes: [string]
    }

  - semanticaio.analyze
    kwargs:
      {question: string}
    return: {
      class: string,
      match: { question: string, distance: float}
    }

  Subscribed Events:
  - semanticaio.app.load
  - semanticaio.trainer.load (load only possible if trainer state is 'new' or 'ready')
  - semanticaio.trainer.start
    kwargs:
      pretrain: Boolean (optional, default: False)
  - semanticaio.trainer.stop
  - semanticaio.trainer.commit (note: commit => reload app)

  (& all events published by other components)

  Published Events:
  - semanticaio.app.state.loading
  - semanticaio.app.state.loaded
  - semanticaio.trainer.state.loading
  - semanticaio.trainer.state.loaded
  - semanticaio.trainer.state.starting
  - semanticaio.trainer.state.started
  - semanticaio.trainer.state.stopping
  - semanticaio.trainer.state.stopped
  - semanticaio.trainer.state.committing
  - semanticaio.trainer.state.committed

** encoder **
  RPC:
  - semanticaio.encoder.load

  - semanticaio.encoder.encode
    kwargs:
      question: string (optional)
      questions: [string] (optional)
    return:
      if kwargs.question:
        encoded: [float]
      if kwargs.questions:
        encoded: [[float]]

** encoder trainer **
  RPC:
  - semanticaio.encoder.trainer.load

  - semanticaio.encoder.trainer.save

  (TODO later - semanticaio.encoder.trainer.stats.get
    return
      time: training duration in seconds
      loss: float (last batch loss)
      accuracy: float (last batch accuracy)
      nQuestions: int)

  Subscribed Events:
  - semanticaio.encoder.trainer.start
    kwargs:
      pretrain: Boolean (optional, default: False)
    (TODO later:
      nQuestions: int (optional), stop after nQuestions trained
      objectiveAccuracy: float (optional), stop after objectiveAccuracy reached
      time: int (optional), stop after a number of seconds)

  - semanticaio.encoder.trainer.stop

  Published Events:
  - semanticaio.encoder.trainer.started

  - semanticaio.encoder.trainer.stopped
    (TODO later - kwargs:
      time: training duration in seconds
      loss: float (last batch loss)
      accuracy: float (last batch accuracy)
      nQuestions: int)

** classifier **
  RPC:
  - semanticaio.classifier.load

  - semanticaio.classifier.classify
    kwargs:
      question: [float]
    return:
      <class>: <label>

** classifier trainer ** (full db one-hot training over correct questions because svc used)
  RPC:
  - semanticaio.classifier.trainer.load

  - semanticaio.classifier.trainer.save

  Subscribed Events:
  - semanticaio.classifier.trainer.train

  Published Events:
  - semanticaio.classifier.trainer.trained

** matcher **
  RPC:
  - semanticaio.matcher.load

  - semanticaio.matcher.match
    kwargs:
      question: [float]
    return:
      id: int of closest question,
      question: string
      distance: float
